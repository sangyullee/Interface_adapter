'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class debugger
    Inherits DataSet
    
    Private tabledebugger As debuggerDataTable
    
    Private tableioRegisters As ioRegistersDataTable
    
    Private tableregister As registerDataTable
    
    Private relationioRegisters_register As DataRelation
    
    Private relationdebugger_ioRegisters As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("debugger")) Is Nothing) Then
                Me.Tables.Add(New debuggerDataTable(ds.Tables("debugger")))
            End If
            If (Not (ds.Tables("ioRegisters")) Is Nothing) Then
                Me.Tables.Add(New ioRegistersDataTable(ds.Tables("ioRegisters")))
            End If
            If (Not (ds.Tables("register")) Is Nothing) Then
                Me.Tables.Add(New registerDataTable(ds.Tables("register")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property debugger As debuggerDataTable
        Get
            Return Me.tabledebugger
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ioRegisters As ioRegistersDataTable
        Get
            Return Me.tableioRegisters
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property register As registerDataTable
        Get
            Return Me.tableregister
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As debugger = CType(MyBase.Clone,debugger)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("debugger")) Is Nothing) Then
            Me.Tables.Add(New debuggerDataTable(ds.Tables("debugger")))
        End If
        If (Not (ds.Tables("ioRegisters")) Is Nothing) Then
            Me.Tables.Add(New ioRegistersDataTable(ds.Tables("ioRegisters")))
        End If
        If (Not (ds.Tables("register")) Is Nothing) Then
            Me.Tables.Add(New registerDataTable(ds.Tables("register")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabledebugger = CType(Me.Tables("debugger"),debuggerDataTable)
        If (Not (Me.tabledebugger) Is Nothing) Then
            Me.tabledebugger.InitVars
        End If
        Me.tableioRegisters = CType(Me.Tables("ioRegisters"),ioRegistersDataTable)
        If (Not (Me.tableioRegisters) Is Nothing) Then
            Me.tableioRegisters.InitVars
        End If
        Me.tableregister = CType(Me.Tables("register"),registerDataTable)
        If (Not (Me.tableregister) Is Nothing) Then
            Me.tableregister.InitVars
        End If
        Me.relationioRegisters_register = Me.Relations("ioRegisters_register")
        Me.relationdebugger_ioRegisters = Me.Relations("debugger_ioRegisters")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "debugger"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabledebugger = New debuggerDataTable
        Me.Tables.Add(Me.tabledebugger)
        Me.tableioRegisters = New ioRegistersDataTable
        Me.Tables.Add(Me.tableioRegisters)
        Me.tableregister = New registerDataTable
        Me.Tables.Add(Me.tableregister)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("debugger_ioRegisters", New DataColumn() {Me.tabledebugger.debugger_IdColumn}, New DataColumn() {Me.tableioRegisters.debugger_IdColumn})
        Me.tableioRegisters.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ioRegisters_register", New DataColumn() {Me.tableioRegisters.ioRegisters_IdColumn}, New DataColumn() {Me.tableregister.ioRegisters_IdColumn})
        Me.tableregister.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationioRegisters_register = New DataRelation("ioRegisters_register", New DataColumn() {Me.tableioRegisters.ioRegisters_IdColumn}, New DataColumn() {Me.tableregister.ioRegisters_IdColumn}, false)
        Me.relationioRegisters_register.Nested = true
        Me.Relations.Add(Me.relationioRegisters_register)
        Me.relationdebugger_ioRegisters = New DataRelation("debugger_ioRegisters", New DataColumn() {Me.tabledebugger.debugger_IdColumn}, New DataColumn() {Me.tableioRegisters.debugger_IdColumn}, false)
        Me.relationdebugger_ioRegisters.Nested = true
        Me.Relations.Add(Me.relationdebugger_ioRegisters)
    End Sub
    
    Private Function ShouldSerializedebugger() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeioRegisters() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeregister() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub debuggerRowChangeEventHandler(ByVal sender As Object, ByVal e As debuggerRowChangeEvent)
    
    Public Delegate Sub ioRegistersRowChangeEventHandler(ByVal sender As Object, ByVal e As ioRegistersRowChangeEvent)
    
    Public Delegate Sub registerRowChangeEventHandler(ByVal sender As Object, ByVal e As registerRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class debuggerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncommPort As DataColumn
        
        Private columndebugger_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("debugger")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property commPortColumn As DataColumn
            Get
                Return Me.columncommPort
            End Get
        End Property
        
        Friend ReadOnly Property debugger_IdColumn As DataColumn
            Get
                Return Me.columndebugger_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As debuggerRow
            Get
                Return CType(Me.Rows(index),debuggerRow)
            End Get
        End Property
        
        Public Event debuggerRowChanged As debuggerRowChangeEventHandler
        
        Public Event debuggerRowChanging As debuggerRowChangeEventHandler
        
        Public Event debuggerRowDeleted As debuggerRowChangeEventHandler
        
        Public Event debuggerRowDeleting As debuggerRowChangeEventHandler
        
        Public Overloads Sub AdddebuggerRow(ByVal row As debuggerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdddebuggerRow(ByVal commPort As Integer) As debuggerRow
            Dim rowdebuggerRow As debuggerRow = CType(Me.NewRow,debuggerRow)
            rowdebuggerRow.ItemArray = New Object() {commPort, Nothing}
            Me.Rows.Add(rowdebuggerRow)
            Return rowdebuggerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As debuggerDataTable = CType(MyBase.Clone,debuggerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New debuggerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncommPort = Me.Columns("commPort")
            Me.columndebugger_Id = Me.Columns("debugger_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columncommPort = New DataColumn("commPort", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncommPort)
            Me.columndebugger_Id = New DataColumn("debugger_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columndebugger_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columndebugger_Id}, true))
            Me.columncommPort.AllowDBNull = false
            Me.columndebugger_Id.AutoIncrement = true
            Me.columndebugger_Id.AllowDBNull = false
            Me.columndebugger_Id.Unique = true
        End Sub
        
        Public Function NewdebuggerRow() As debuggerRow
            Return CType(Me.NewRow,debuggerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New debuggerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(debuggerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.debuggerRowChangedEvent) Is Nothing) Then
                RaiseEvent debuggerRowChanged(Me, New debuggerRowChangeEvent(CType(e.Row,debuggerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.debuggerRowChangingEvent) Is Nothing) Then
                RaiseEvent debuggerRowChanging(Me, New debuggerRowChangeEvent(CType(e.Row,debuggerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.debuggerRowDeletedEvent) Is Nothing) Then
                RaiseEvent debuggerRowDeleted(Me, New debuggerRowChangeEvent(CType(e.Row,debuggerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.debuggerRowDeletingEvent) Is Nothing) Then
                RaiseEvent debuggerRowDeleting(Me, New debuggerRowChangeEvent(CType(e.Row,debuggerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovedebuggerRow(ByVal row As debuggerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class debuggerRow
        Inherits DataRow
        
        Private tabledebugger As debuggerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledebugger = CType(Me.Table,debuggerDataTable)
        End Sub
        
        Public Property commPort As Integer
            Get
                Return CType(Me(Me.tabledebugger.commPortColumn),Integer)
            End Get
            Set
                Me(Me.tabledebugger.commPortColumn) = value
            End Set
        End Property
        
        Public Function GetioRegistersRows() As ioRegistersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("debugger_ioRegisters")),ioRegistersRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class debuggerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As debuggerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As debuggerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As debuggerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ioRegistersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnioRegisters_Id As DataColumn
        
        Private columndebugger_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ioRegisters")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ioRegisters_IdColumn As DataColumn
            Get
                Return Me.columnioRegisters_Id
            End Get
        End Property
        
        Friend ReadOnly Property debugger_IdColumn As DataColumn
            Get
                Return Me.columndebugger_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ioRegistersRow
            Get
                Return CType(Me.Rows(index),ioRegistersRow)
            End Get
        End Property
        
        Public Event ioRegistersRowChanged As ioRegistersRowChangeEventHandler
        
        Public Event ioRegistersRowChanging As ioRegistersRowChangeEventHandler
        
        Public Event ioRegistersRowDeleted As ioRegistersRowChangeEventHandler
        
        Public Event ioRegistersRowDeleting As ioRegistersRowChangeEventHandler
        
        Public Overloads Sub AddioRegistersRow(ByVal row As ioRegistersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddioRegistersRow(ByVal parentdebuggerRowBydebugger_ioRegisters As debuggerRow) As ioRegistersRow
            Dim rowioRegistersRow As ioRegistersRow = CType(Me.NewRow,ioRegistersRow)
            rowioRegistersRow.ItemArray = New Object() {Nothing, parentdebuggerRowBydebugger_ioRegisters(1)}
            Me.Rows.Add(rowioRegistersRow)
            Return rowioRegistersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ioRegistersDataTable = CType(MyBase.Clone,ioRegistersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ioRegistersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnioRegisters_Id = Me.Columns("ioRegisters_Id")
            Me.columndebugger_Id = Me.Columns("debugger_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnioRegisters_Id = New DataColumn("ioRegisters_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnioRegisters_Id)
            Me.columndebugger_Id = New DataColumn("debugger_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columndebugger_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnioRegisters_Id}, true))
            Me.columnioRegisters_Id.AutoIncrement = true
            Me.columnioRegisters_Id.AllowDBNull = false
            Me.columnioRegisters_Id.Unique = true
        End Sub
        
        Public Function NewioRegistersRow() As ioRegistersRow
            Return CType(Me.NewRow,ioRegistersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ioRegistersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ioRegistersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ioRegistersRowChangedEvent) Is Nothing) Then
                RaiseEvent ioRegistersRowChanged(Me, New ioRegistersRowChangeEvent(CType(e.Row,ioRegistersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ioRegistersRowChangingEvent) Is Nothing) Then
                RaiseEvent ioRegistersRowChanging(Me, New ioRegistersRowChangeEvent(CType(e.Row,ioRegistersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ioRegistersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ioRegistersRowDeleted(Me, New ioRegistersRowChangeEvent(CType(e.Row,ioRegistersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ioRegistersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ioRegistersRowDeleting(Me, New ioRegistersRowChangeEvent(CType(e.Row,ioRegistersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveioRegistersRow(ByVal row As ioRegistersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ioRegistersRow
        Inherits DataRow
        
        Private tableioRegisters As ioRegistersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableioRegisters = CType(Me.Table,ioRegistersDataTable)
        End Sub
        
        Public Property debuggerRow As debuggerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("debugger_ioRegisters")),debuggerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("debugger_ioRegisters"))
            End Set
        End Property
        
        Public Function GetregisterRows() As registerRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ioRegisters_register")),registerRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ioRegistersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ioRegistersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ioRegistersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ioRegistersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class registerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnaddress As DataColumn
        
        Private columnname As DataColumn
        
        Private columnioRegisters_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("register")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property ioRegisters_IdColumn As DataColumn
            Get
                Return Me.columnioRegisters_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As registerRow
            Get
                Return CType(Me.Rows(index),registerRow)
            End Get
        End Property
        
        Public Event registerRowChanged As registerRowChangeEventHandler
        
        Public Event registerRowChanging As registerRowChangeEventHandler
        
        Public Event registerRowDeleted As registerRowChangeEventHandler
        
        Public Event registerRowDeleting As registerRowChangeEventHandler
        
        Public Overloads Sub AddregisterRow(ByVal row As registerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddregisterRow(ByVal address As Long, ByVal name As String, ByVal parentioRegistersRowByioRegisters_register As ioRegistersRow) As registerRow
            Dim rowregisterRow As registerRow = CType(Me.NewRow,registerRow)
            rowregisterRow.ItemArray = New Object() {address, name, parentioRegistersRowByioRegisters_register(0)}
            Me.Rows.Add(rowregisterRow)
            Return rowregisterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As registerDataTable = CType(MyBase.Clone,registerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New registerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnaddress = Me.Columns("address")
            Me.columnname = Me.Columns("name")
            Me.columnioRegisters_Id = Me.Columns("ioRegisters_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnaddress = New DataColumn("address", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnaddress)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnioRegisters_Id = New DataColumn("ioRegisters_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnioRegisters_Id)
            Me.columnaddress.ReadOnly = true
            Me.columnaddress.Namespace = ""
            Me.columnname.AllowDBNull = false
        End Sub
        
        Public Function NewregisterRow() As registerRow
            Return CType(Me.NewRow,registerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New registerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(registerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.registerRowChangedEvent) Is Nothing) Then
                RaiseEvent registerRowChanged(Me, New registerRowChangeEvent(CType(e.Row,registerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.registerRowChangingEvent) Is Nothing) Then
                RaiseEvent registerRowChanging(Me, New registerRowChangeEvent(CType(e.Row,registerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.registerRowDeletedEvent) Is Nothing) Then
                RaiseEvent registerRowDeleted(Me, New registerRowChangeEvent(CType(e.Row,registerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.registerRowDeletingEvent) Is Nothing) Then
                RaiseEvent registerRowDeleting(Me, New registerRowChangeEvent(CType(e.Row,registerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveregisterRow(ByVal row As registerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class registerRow
        Inherits DataRow
        
        Private tableregister As registerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableregister = CType(Me.Table,registerDataTable)
        End Sub
        
        Public Property address As Long
            Get
                Try 
                    Return CType(Me(Me.tableregister.addressColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableregister.addressColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Return CType(Me(Me.tableregister.nameColumn),String)
            End Get
            Set
                Me(Me.tableregister.nameColumn) = value
            End Set
        End Property
        
        Public Property ioRegistersRow As ioRegistersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ioRegisters_register")),ioRegistersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ioRegisters_register"))
            End Set
        End Property
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableregister.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tableregister.addressColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class registerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As registerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As registerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As registerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
