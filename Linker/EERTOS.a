;#include "RTOS/EERTOS.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "RTOS/EERTOSHAL.h"
;
;
;/*
;Насколько хорошо это будет работать, если таймер установить на 50-100мкс при 16МГц?
;
;DI HALT:
;9 Апрель 2012 в 21:08
;Плохо будет работать. Там довольно многое можно оптимизировать,
;среднее выполнение блока таймерной службы сейчас около 600 тактов.
;Ну или около того. Столько же в среднем занимает перебор очереди,
;установка таймера порядка 700 тактов, установка задачи около 400 тактов.
;Реально тайминг снизить до 500мкс ,но делать очень коротки задачи, иначе таймер лажать будет.
;*/
;
;
;/*
;  UPDATE - Избавился от очереди задач TaskQueue, вместо этого в диспетчере задач
;  выполняются задачи из очереди MainTimer, которые уже "выщелкали",
;  соответственно количество кода очень уменьшилось.
;  MEMORY -58 WORDS
;*/
;
;
;
;// Очереди задач, таймеров.
;// Тип данных - указатель на функцию
;//volatile static TPTR	TaskQueue[TaskQueueSize+1];			// очередь указателей
;//update
;volatile static struct
;						{
;						    TPTR GoToTask; 						// Указатель перехода
;						    uint16_t Time;					// Выдержка в мс
;						}
;						MainTimer[MainTimerQueueSize+1];	// Очередь таймеров
;
;
;// RTOS Подготовка. Очистка очередей
;  void InitRTOS(void)
; 0001 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 002A uint8_t	index;
; 0001 002B 
; 0001 002C /*   //UPDATE
; 0001 002D     for(index=0;index!=TaskQueueSize+1;index++)	// Во все позиции записываем Idle
; 0001 002E 	    {
; 0001 002F 	    TaskQueue[index] = Idle;
; 0001 0030 	 }
; 0001 0031 */
; 0001 0032       for(index=0;index!=MainTimerQueueSize+1;index++) // Обнуляем все таймеры.
;PCODE: $0000000F VOL: 0
;	index -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0033     	{
; 0001 0034 	    MainTimer[index].GoToTask = Idle;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 1
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 0035 	    MainTimer[index].Time = 0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 1
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 0036 	 }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0037 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;
;//Пустая процедура - простой ядра.
;  void  Idle(void)
; 0001 003C {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 003D 
; 0001 003E }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;
;
; //UPDATE
; void SetTask(TPTR TS){  // Поставить задачу в очередь для немедленного выполнения
; 0001 0043 void SetTask(TPTR TS){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0044  SetTimerTask(TS,0);
;	*TS -> Y+0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0045 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;
;//Функция установки задачи по таймеру. Передаваемые параметры - указатель на функцию,
;// Время выдержки в тиках системного таймера. Возвращет код ошибки.
;
;void SetTimerTask(TPTR TS, unsigned int NewTime)    //1 task ~12words
; 0001 004C {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 004D uint8_t		index=0;
; 0001 004E uint8_t		nointerrupted = 0;
; 0001 004F 
; 0001 0050 if (STATUS_REG & (1<<Interrupt_Flag)) 			// Проверка запрета прерывания, аналогично функции выше
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;	*TS -> Y+4
;	NewTime -> Y+2
;	index -> R17
;	nointerrupted -> R16
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0051 	{
; 0001 0052 	_disable_interrupts()
;PCODE: $0000004A VOL: 0
	cli
;PCODE: $0000004B VOL: 0
; 0001 0053 	nointerrupted = 1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0054 	}
; 0001 0055 //====================================================================
; 0001 0056 // My UPDATE - not optimized
; 0001 0057   for(index=0;index!=MainTimerQueueSize+1;++index)	//Прочесываем очередь таймеров
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0058 	{
; 0001 0059 	if(MainTimer[index].GoToTask == TS)				// Если уже есть запись с таким адресом
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 1
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 005A 		{
; 0001 005B 		MainTimer[index].Time = NewTime;			// Перезаписываем ей выдержку
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 1
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 005C 		if (nointerrupted) 	_enable_interrupts()		// Разрешаем прерывания если не были запрещены.
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
	sei
;PCODE: $0000006D VOL: 0
; 0001 005D 		return;										// Выходим. Раньше был код успешной операции. Пока убрал
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 005E 		}
; 0001 005F 	}
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0060   for(index=0;index!=MainTimerQueueSize+1;++index)	// Если не находим похожий таймер, то ищем любой пустой
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0061 	{
; 0001 0062 	if (MainTimer[index].GoToTask == Idle)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 1
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0063 		{
; 0001 0064 		MainTimer[index].GoToTask = TS;			// Заполняем поле перехода задачи
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 1
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 0065 		MainTimer[index].Time = NewTime;		// И поле выдержки времени
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 1
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0066 		if (nointerrupted) 	_enable_interrupts()	// Разрешаем прерывания
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
	sei
;PCODE: $000000A0 VOL: 0
; 0001 0067 		return;									// Выход.
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 0068 		}
; 0001 0069 
; 0001 006A 	}
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 006B //====================================================================
; 0001 006C /*
; 0001 006D   for(index=0;index!=MainTimerQueueSize+1;++index)	//Прочесываем очередь таймеров
; 0001 006E 	{
; 0001 006F 	if(MainTimer[index].GoToTask == TS)				// Если уже есть запись с таким адресом
; 0001 0070 		{
; 0001 0071 		MainTimer[index].Time = NewTime;			// Перезаписываем ей выдержку
; 0001 0072 		if (nointerrupted) 	_enable_interrupts()		// Разрешаем прерывания если не были запрещены.
; 0001 0073 		return;										// Выходим. Раньше был код успешной операции. Пока убрал
; 0001 0074 		}
; 0001 0075 	}
; 0001 0076   for(index=0;index!=MainTimerQueueSize+1;++index)	// Если не находим похожий таймер, то ищем любой пустой
; 0001 0077 	{
; 0001 0078 	if (MainTimer[index].GoToTask == Idle)
; 0001 0079 		{
; 0001 007A 		MainTimer[index].GoToTask = TS;			// Заполняем поле перехода задачи
; 0001 007B 		MainTimer[index].Time = NewTime;		// И поле выдержки времени
; 0001 007C 		if (nointerrupted) 	_enable_interrupts()	// Разрешаем прерывания
; 0001 007D 		return;									// Выход.
; 0001 007E 		}
; 0001 007F 
; 0001 0080 	}	*/								// тут можно сделать return c кодом ошибки - нет свободных таймеров
; 0001 0081 }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;/*=================================================================================
;Диспетчер задач ОС. Выбирает из очереди задачи и отправляет на выполнение.
;*/
;
;inline void TaskManager(void)
; 0001 0088 {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 0089 uint8_t		index=0;
; 0001 008A 
; 0001 008B //UPDATE
; 0001 008C TPTR task;
; 0001 008D //TPTR	GoToTask = Idle;		// Инициализируем переменные
; 0001 008E 
; 0001 008F _disable_interrupts()				// Запрещаем прерывания!!!
;PCODE: $000000B7 VOL: 0
;	index -> R17
;	*task -> R18,R19
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
	cli
;PCODE: $000000BB VOL: 0
; 0001 0090 //UPDATE
; 0001 0091 //================================================================================================
; 0001 0092   for(index=0;index!=MainTimerQueueSize+1;++index) {  // Прочесываем очередь в поисках нужной задачи
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0001 0093 		if ((MainTimer[index].GoToTask != Idle)&&(MainTimer[index].Time==0)) { // пропускаем пустые задачи и те, время которых еще не подошло
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 1
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 1
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 0094 		    task=MainTimer[index].GoToTask;             // запомним задачу
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 1
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0001 0095 		    MainTimer[index].GoToTask = Idle;           // ставим затычку
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 1
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0001 0096             _enable_interrupts()							// Разрешаем прерывания
;PCODE: $000000E9 VOL: 0
	sei
;PCODE: $000000EA VOL: 0
; 0001 0097             (task)();								    // Переходим к задаче
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 0098             return;                                     // выход до следующего цикла
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0001 0099 		}
; 0001 009A 	}
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0001 009B     _enable_interrupts()							// Разрешаем прерывания
;PCODE: $000000F6 VOL: 0
	sei
;PCODE: $000000F7 VOL: 0
; 0001 009C 	Idle();                                     // обошли задачи, нужных нет - простой
;PCODE: $000000F8 VOL: 0
; 0001 009D //====================================================================================================
; 0001 009E /* //UPDATE
; 0001 009F GoToTask = TaskQueue[0];		// Хватаем первое значение из очереди
; 0001 00A0 if (GoToTask==Idle) 			// Если там пусто
; 0001 00A1 	{_enable_interrupts()			// Разрешаем прерывания
; 0001 00A2 	(Idle)(); 					// Переходим на обработку пустого цикла
; 0001 00A3 	}
; 0001 00A4 else
; 0001 00A5 	{ for(index=0;index!=TaskQueueSize;index++)	// В противном случае сдвигаем всю очередь
; 0001 00A6 		{
; 0001 00A7 		TaskQueue[index]=TaskQueue[index+1];
; 0001 00A8 		}
; 0001 00A9 	TaskQueue[TaskQueueSize]= Idle;				// В последнюю запись пихаем затычку
; 0001 00AA _enable_interrupts()							// Разрешаем прерывания
; 0001 00AB 	(GoToTask)();								// Переходим к задаче
; 0001 00AC 	}
; 0001 00AD  */
; 0001 00AE }
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;
;/*
;Служба таймеров ядра. Должна вызываться из прерывания раз в 1мс. Хотя время можно варьировать в зависимости от задачи
;
;To DO: Привести к возможности загружать произвольную очередь таймеров. Тогда можно будет создавать их целую прорву.
;А также использовать эту функцию произвольным образом.
;В этом случае не забыть добавить проверку прерывания.
;*/
;inline void TimerService(void)
; 0001 00B8 {
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 00B9 uint8_t index;
; 0001 00BA 
; 0001 00BB for(index=0;index!=MainTimerQueueSize+1;index++)		// Прочесываем очередь таймеров
;PCODE: $000000FF VOL: 0
;	index -> R17
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 00BC 	{
; 0001 00BD //==========================================================================
; 0001 00BE //UPDATE
; 0001 00BF          if((MainTimer[index].GoToTask != Idle) && 		    // Если не пустышка и
; 0001 00C0            (MainTimer[index].Time > 0)) {					// таймер не выщелкал, то
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 1
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 1
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 00C1             MainTimer[index].Time--;						// щелкаем еще раз.
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 1
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0001 00C2 		};
;PCODE: $0000012A VOL: 0
; 0001 00C3 	}
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 00C4 }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;
;//добавление от sniuk 7.1.14
;void ClearTimerTask(TPTR TS)  //обнуление таймера
; 0001 00C8 {
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0001 00C9 uint8_t	 index=0;
; 0001 00CA uint8_t nointerrupted = 0;
; 0001 00CB if (STATUS_REG & (1<<Interrupt_Flag))
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;	*TS -> Y+2
;	index -> R17
;	nointerrupted -> R16
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 00CC {
; 0001 00CD _disable_interrupts();
;PCODE: $0000013F VOL: 0
	cli
;PCODE: $00000140 VOL: 0
; 0001 00CE nointerrupted = 1;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0001 00CF }
; 0001 00D0     for(index=0; index!=MainTimerQueueSize+1; ++index)
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0001 00D1     {
; 0001 00D2         if(MainTimer[index].GoToTask == TS)
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 1
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 00D3         {
; 0001 00D4             MainTimer[index].GoToTask = Idle;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 1
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0001 00D5             MainTimer[index].Time = 0; // Обнуляем время
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 1
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 00D6             if (nointerrupted) _enable_interrupts();
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
	sei
;PCODE: $00000169 VOL: 0
; 0001 00D7             return;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0001 00D8         }
; 0001 00D9     }
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0001 00DA }
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;
;
;    #warning обновил на файл ниже!
;/*
;
;Автор www.google.com-accounts-o8-id-id-AItOawmi18Y12U8R4bYF3i0GRgR
;Язык: C++
;Опубликовано 8 ноября 2011 года в 00:05
;Просмотров 1067
;Вставлю и свои 5 копеек :) Избавился от очереди задач TaskQueue, вместо этого в диспетчере задач выполняются задачи из очереди MainTimer, которые уже "выщелкали", соответственно количество кода очень уменьшилось. Изменен только код eertos.c
;#include "eertos.h"
;
;// Очередь задач.
;volatile static struct	{
;	TPTR GoToTask; 						// Указатель перехода
;	uint16_t Time;							// Выдержка в мс
;} MainTimer[MainTimerQueueSize+1];	// Очередь таймеров
;
;// RTOS Подготовка. Очистка очередей
;inline void InitRTOS(void)
;{
;    uint8_t	index;
;
;    for(index=0;index!=MainTimerQueueSize+1;index++) { // Обнуляем все таймеры.
;		MainTimer[index].GoToTask = Idle;
;        MainTimer[index].Time = 0;
;	}
;}
;
;//Пустая процедура - простой ядра.
;void  Idle(void) {
;
;}
;
;//Функция установки задачи по таймеру. Передаваемые параметры - указатель на функцию,
;// Время выдержки в тиках системного таймера. Возвращет код ошибки.
;void SetTimerTask(TPTR TS, uint16_t NewTime) {
;
;    uint8_t		index=0;
;    uint8_t		nointerrupted = 0;
;
;    if (STATUS_REG & (_BV(Interrupt_Flag))) { 			// Проверка запрета прерывания, аналогично функции выше
;        Disable_Interrupt
;        nointerrupted = 1;
;	}
;
;    for(index=0;index!=MainTimerQueueSize+1;++index) {	//Прочесываем очередь таймеров
;        if(MainTimer[index].GoToTask == TS) {			// Если уже есть запись с таким адресом
;            MainTimer[index].Time = NewTime;			// Перезаписываем ей выдержку
;            if (nointerrupted) 	Enable_Interrupt		// Разрешаем прерывания если не были запрещены.
;            return;										// Выходим. Раньше был код успешной операции. Пока убрал
;		}
;	}
;
;    for(index=0;index!=MainTimerQueueSize+1;++index) {	// Если не находим похожий таймер, то ищем любой пустой
;		if (MainTimer[index].GoToTask == Idle) {
;			MainTimer[index].GoToTask = TS;			// Заполняем поле перехода задачи
;            MainTimer[index].Time = NewTime;		// И поле выдержки времени
;            if (nointerrupted) 	Enable_Interrupt	// Разрешаем прерывания
;            return;									// Выход.
;		}
;	}												// тут можно сделать return c кодом ошибки - нет свободных таймеров
;}
;
;void SetTask(TPTR TS) {                             // Поставить задачу в очередь для немедленного выполнения
;    SetTimerTask(TS,0);
;}
;
;//=================================================================================
;Диспетчер задач ОС. Выбирает из очереди задачи и отправляет на выполнение.
;
;
;inline void TaskManager(void) {
;
;uint8_t		index=0;
;TPTR task;
;
;    Disable_Interrupt				// Запрещаем прерывания!!!
;    for(index=0;index!=MainTimerQueueSize+1;++index) {  // Прочесываем очередь в поисках нужной задачи
;		if ((MainTimer[index].GoToTask != Idle)&&(MainTimer[index].Time==0)) { // пропускаем пустые задачи и те, время которых еще не подошло
;		    task=MainTimer[index].GoToTask;             // запомним задачу
;		    MainTimer[index].GoToTask = Idle;           // ставим затычку
;            Enable_Interrupt							// Разрешаем прерывания
;            (task)();								    // Переходим к задаче
;            return;                                     // выход до следующего цикла
;		}
;	}
;    Enable_Interrupt							// Разрешаем прерывания
;	Idle();                                     // обошли задачи, нужных нет - простой
;}
;
;
;//Служба таймеров ядра. Должна вызываться из прерывания раз в 1мс. Хотя время можно варьировать в зависимости от задачи
;
;inline void TimerService(void) {
;
;uint8_t index;
;
;    for(index=0;index!=MainTimerQueueSize+1;index++) {		// Прочесываем очередь таймеров
;        if((MainTimer[index].GoToTask != Idle) && 		    // Если не пустышка и
;           (MainTimer[index].Time > 0)) {					// таймер не выщелкал, то
;            MainTimer[index].Time--;						// щелкаем еще раз.
;		};
;	}
;}
;
;*/
