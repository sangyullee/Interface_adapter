;/*****************************************************
;Project :   CVMegaload
;Version :   1.00
;Date    : 14/05/2004
;Author  : Ralph Hilton
;Chip type           : ATmega
;Program type        : Bootloader
;Clock frequency     : 7.372800 MHz
;Data Stack size     : 256
;Acknowledgement  : Modified from original code by Sylvain Bissonnette
;*****************************************************/
;/*****************************************************
;Note: BAUDRATE must be correctly defined below
;Supported values are
;9600 19200 38400 57600 115200
;Chip header is included by cvmegaload.h from the project configuration
;// The project should be compiled with the following compiler options:
;// Promote char to int
;// Char is unsigned
;// Bit variables 0
;*****************************************************/
;//uncomment to use UART1
;//#define UART1
;
;#define defined _CHIP_ATMEGA16_
;
;#pragma promotechar+
;#pragma uchar+
;#pragma regalloc-
;#pragma optsize+
;
;#ifdef UART1
;#include <cvmegaloaduart1.h> //contains defines for DeviceID FlashSize BootSize PageSize AddressLshift
;#else
;#include <cvmegaload.h> //contains defines for DeviceID FlashSize BootSize PageSize AddressLshift
;PCODE: $00000000 VOL: 0
	.EQU SpmcrAddr=0x57
;PCODE: $00000001 VOL: 0
;PCODE: $00000002 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000003 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000004 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000005 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000006 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000007 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000008 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000009 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $0000000A VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $0000000B VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000C VOL: 0
	#endif
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;#endif
;
;#include <stdio.h>
;
;#define BAUDRATE 9600
;register unsigned int Pagedata @2; //program data to be written from this and read back for checking
;register unsigned int PageAddress @4; //address of the page
;register unsigned int CurrentAddress @6; //address of the current data -  PageAddress + loop counter
;register char inchar @8; //data received from RS232
;register char spmcrval @10; //value to write to SPM control register
;register unsigned int i @11;   //loop counter
;register unsigned int j @13;  //loop counter
;unsigned int ubbr;
;unsigned int Checkdata ; //compared with Pagedata for checking
;char PageBuffer[PageByte]; //buffer for data to be written
;
;#ifdef UART1
;
;#define getchar getchar1
;#define putchar putchar1
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar(void)
;{
;char status,data;
;while (1)
;      {
;      while (((status=UCSRA) & 128)==0);
;      data=UDR1;
;      if ((status & (28))==0)
;         return data;
;      };
;}
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar(char c)
;{
;while ((UCSRA & 32)==0);
;UDR1=c;
;}
;#pragma used-
;
;#endif
;
;char GetPage(void)
; 0000 0054 {

	.CSEG
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0055 char LocalCheckSum = 0;
; 0000 0056 char CheckSum = 0;
; 0000 0057 // The programming software generates a simple checksum in the
; 0000 0058 // same fashion as below to check for data transmission errors
; 0000 0059 for (j=0;j<PageByte;j++)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;	LocalCheckSum -> R17
;	CheckSum -> R16
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 005A     {
; 0000 005B     PageBuffer[j]=getchar();
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005C     LocalCheckSum += PageBuffer[j];
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 005D     }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 005E CheckSum = getchar();
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 005F if (LocalCheckSum == CheckSum) return 1;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0060 else return 0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0061 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;char CheckFlash(void)
; 0000 0064 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0065 //After the data has been written to flash it is read back and compared to the original
; 0000 0066 for (j=0;j<PageByte;j+=2)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0067     {
; 0000 0068     CurrentAddress=PageAddress+j;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0069     #if defined _CHIP_ATMEGA128_
; 0000 006A     #asm
; 0000 006B     movw r30, r6       ;//move  CurrentAddress to Z pointer
; 0000 006C     elpm r2, Z+         ;//read LSB
; 0000 006D     elpm r3, Z           ;//read MSB
; 0000 006E     #endasm
; 0000 006F     #else
; 0000 0070     #asm
;PCODE: $0000004F VOL: 0
; 0000 0071     movw r30, r6       ;//move  CurrentAddress to Z pointer
    movw r30, r6       ;//move  CurrentAddress to Z pointer
;PCODE: $00000050 VOL: 0
; 0000 0072     lpm r2, Z+          ;//read LSB
    lpm r2, Z+          ;//read LSB
;PCODE: $00000051 VOL: 0
; 0000 0073     lpm r3, Z            ;//read MSB
    lpm r3, Z            ;//read MSB
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0074     #endasm
; 0000 0075     #endif
; 0000 0076     Checkdata = PageBuffer[j] +(PageBuffer[j+1]<<8);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0077     if (Pagedata != Checkdata) return 0;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0078     }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0079 return 1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 007A }
;PCODE: $0000006D VOL: 0
;
;void ExecCode(void)
; 0000 007D {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007E #if defined _CHIP_ATMEGA128_
; 0000 007F RAMPZ =  0;
; 0000 0080 #endif
; 0000 0081 MCUCR = 0x01;	       // Enable interrupt vector select
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0082 MCUCR = 0x00;	       // Move interrupt vector to flash
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0083 #asm("jmp 0x00"); // Run application code
;PCODE: $00000074 VOL: 0
	jmp 0x00
;PCODE: $00000075 VOL: 0
; 0000 0084 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;
;void BootLoad(void)
; 0000 0087 {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0088 // Send chip data to the programming software so that it knows
; 0000 0089 // how to format transmissions
; 0000 008A putchar(DeviceID);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 008B putchar(FlashSize);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 008C putchar(BootSize);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 008D putchar(PageSize);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 008E // "!" means all ok and send the next data if there is more
; 0000 008F putchar('!');
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0090 while(1)
;PCODE: $00000089 VOL: 0
; 0000 0091 {
; 0000 0092 PageAddress = (unsigned int)getchar() << 8;  // Receive PageAddress high byte
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0093 PageAddress += getchar();   // Add PageAddress low byte
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0094 if (PageAddress == 0xffff) ExecCode(); // The windows program sends this value when finished
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0095 #if defined _CHIP_ATMEGA128_
; 0000 0096 if (PageAddress >> 8) RAMPZ =  1;
; 0000 0097 else RAMPZ=0;
; 0000 0098 #endif
; 0000 0099 PageAddress = PageAddress << AddressLshift; //essentially the same as multiply by PageSize
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 009A if (GetPage()) //receive one page of data followed by a checksum byte and verify data
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 009B {
; 0000 009C     for (i=0;i<PageByte;i+=2) //fill temporary buffer in 2 byte chunks from PageBuffer
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 009D 
; 0000 009E         {
; 0000 009F         Pagedata=PageBuffer[i]+(PageBuffer[i+1]<<8);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00A0         while (SPMCR&1); //wait for spm complete
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A1         CurrentAddress=PageAddress+i;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00A2         spmcrval=1;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A3         #asm
;PCODE: $000000BD VOL: 0
; 0000 00A4         movw r30, r6    ;//move CurrentAddress to Z pointer
        movw r30, r6    ;//move CurrentAddress to Z pointer
;PCODE: $000000BE VOL: 0
; 0000 00A5         mov r1, r3        ;//move Pagedata MSB reg 1
        mov r1, r3        ;//move Pagedata MSB reg 1
;PCODE: $000000BF VOL: 0
; 0000 00A6         mov r0, r2        ;//move Pagedata LSB reg 1
        mov r0, r2        ;//move Pagedata LSB reg 1
;PCODE: $000000C0 VOL: 0
; 0000 00A7         sts SpmcrAddr, r10   ;//move spmcrval to SPM control register
        sts SpmcrAddr, r10   ;//move spmcrval to SPM control register
;PCODE: $000000C1 VOL: 0
; 0000 00A8         spm                ;//store program memory
        spm                ;//store program memory
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00A9         #endasm
; 0000 00AA         }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00AB 
; 0000 00AC     while (SPMCR&1);  //wait for spm complete
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00AD     spmcrval=3;        //erase page
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00AE     #asm
;PCODE: $000000D3 VOL: 0
; 0000 00AF     movw r30, r4       ;//move PageAddress to Z pointer
    movw r30, r4       ;//move PageAddress to Z pointer
;PCODE: $000000D4 VOL: 0
; 0000 00B0     sts SpmcrAddr, r10    ;//move spmcrval to SPM control register
    sts SpmcrAddr, r10    ;//move spmcrval to SPM control register
;PCODE: $000000D5 VOL: 0
; 0000 00B1     spm                 ;//erase page
    spm                 ;//erase page
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00B2     #endasm
; 0000 00B3 
; 0000 00B4     while (SPMCR&1); //wait for spm complete
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B5     spmcrval=5;        //write page
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B6     #asm
;PCODE: $000000E1 VOL: 0
; 0000 00B7     movw r30, r4       ;//move PageAddress to Z pointer
    movw r30, r4       ;//move PageAddress to Z pointer
;PCODE: $000000E2 VOL: 0
; 0000 00B8     sts SpmcrAddr, r10    ;//move spmcrval to SPM control register
    sts SpmcrAddr, r10    ;//move spmcrval to SPM control register
;PCODE: $000000E3 VOL: 0
; 0000 00B9     spm                 ;//write page
    spm                 ;//write page
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00BA     #endasm
; 0000 00BB 
; 0000 00BC     while (SPMCR&1);  //wait for spm complete
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00BD     spmcrval=0x11;   //enableRWW  see mega8 datasheet for explanation
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00BE      // P. 212 Section "Prevent reading the RWW section
; 0000 00BF      // during self-programming
; 0000 00C0     #asm
;PCODE: $000000EF VOL: 0
; 0000 00C1     sts SpmcrAddr, r10   ;//move spmcrval to SPMCR
    sts SpmcrAddr, r10   ;//move spmcrval to SPMCR
;PCODE: $000000F0 VOL: 0
; 0000 00C2     spm
    spm
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00C3     #endasm
; 0000 00C4      if (CheckFlash()) putchar('!');  //all ok, send next page
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00C5      else putchar('@'); //there was an error, resend page
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00C6      }  //end if (GetPage())
;PCODE: $000000FE VOL: 0
; 0000 00C7   else putchar('@');  //there was an error ,resend page
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00C8   }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00C9   }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;
;void main(void)
; 0000 00CC {
;PCODE: $00000109 VOL: 0
; 0000 00CD // USART initialization
; 0000 00CE // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00CF // USART Receiver: On
; 0000 00D0 // USART Transmitter: On
; 0000 00D1 // USART Mode: Asynchronous
; 0000 00D2 // USART Baud rate: 9600
; 0000 00D3 UCSRA=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00D4 UCSRB=0x18;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00D5 UCSRC=0x86;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00D6 //UBRRH=0x00;
; 0000 00D7 //UBRRL=0x2F;
; 0000 00D8 
; 0000 00D9 ubbr = (unsigned long int)_MCU_CLOCK_FREQUENCY_ / (BAUDRATE * 16) - 1;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00DA UBRRH=ubbr >> 8;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00DB UBRRL = ubbr;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00DC 
; 0000 00DD putchar('>'); //I'm here, talk to me
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00DE 
; 0000 00DF while ( (! (UCSRA&128)) &( i < 32000) ) i++; //wait for data in or timeout
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00E0 if (i < 32000)  inchar= getchar();
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00E1 
; 0000 00E2 if (inchar == '<') BootLoad(); // I'm here too, go ahead and load the program to flash
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00E3 ExecCode();  // set up and jump to application
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00E4 }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
